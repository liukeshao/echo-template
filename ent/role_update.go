// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/liukeshao/echo-template/ent/predicate"
	"github.com/liukeshao/echo-template/ent/role"
	"github.com/liukeshao/echo-template/ent/rolemenu"
	"github.com/liukeshao/echo-template/ent/userrole"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoleUpdate) SetDeletedAt(i int64) *RoleUpdate {
	ru.mutation.ResetDeletedAt()
	ru.mutation.SetDeletedAt(i)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeletedAt(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetDeletedAt(*i)
	}
	return ru
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ru *RoleUpdate) AddDeletedAt(i int64) *RoleUpdate {
	ru.mutation.AddDeletedAt(i)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetCode sets the "code" field.
func (ru *RoleUpdate) SetCode(s string) *RoleUpdate {
	ru.mutation.SetCode(s)
	return ru
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableCode(s *string) *RoleUpdate {
	if s != nil {
		ru.SetCode(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoleUpdate) SetDescription(s string) *RoleUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDescription(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoleUpdate) ClearDescription() *RoleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RoleUpdate) SetStatus(r role.Status) *RoleUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableStatus(r *role.Status) *RoleUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetDataScope sets the "data_scope" field.
func (ru *RoleUpdate) SetDataScope(rs role.DataScope) *RoleUpdate {
	ru.mutation.SetDataScope(rs)
	return ru
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDataScope(rs *role.DataScope) *RoleUpdate {
	if rs != nil {
		ru.SetDataScope(*rs)
	}
	return ru
}

// SetDeptIds sets the "dept_ids" field.
func (ru *RoleUpdate) SetDeptIds(s []string) *RoleUpdate {
	ru.mutation.SetDeptIds(s)
	return ru
}

// AppendDeptIds appends s to the "dept_ids" field.
func (ru *RoleUpdate) AppendDeptIds(s []string) *RoleUpdate {
	ru.mutation.AppendDeptIds(s)
	return ru
}

// ClearDeptIds clears the value of the "dept_ids" field.
func (ru *RoleUpdate) ClearDeptIds() *RoleUpdate {
	ru.mutation.ClearDeptIds()
	return ru
}

// SetIsBuiltin sets the "is_builtin" field.
func (ru *RoleUpdate) SetIsBuiltin(b bool) *RoleUpdate {
	ru.mutation.SetIsBuiltin(b)
	return ru
}

// SetNillableIsBuiltin sets the "is_builtin" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableIsBuiltin(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetIsBuiltin(*b)
	}
	return ru
}

// SetSortOrder sets the "sort_order" field.
func (ru *RoleUpdate) SetSortOrder(i int) *RoleUpdate {
	ru.mutation.ResetSortOrder()
	ru.mutation.SetSortOrder(i)
	return ru
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableSortOrder(i *int) *RoleUpdate {
	if i != nil {
		ru.SetSortOrder(*i)
	}
	return ru
}

// AddSortOrder adds i to the "sort_order" field.
func (ru *RoleUpdate) AddSortOrder(i int) *RoleUpdate {
	ru.mutation.AddSortOrder(i)
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RoleUpdate) SetRemark(s string) *RoleUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRemark(s *string) *RoleUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *RoleUpdate) ClearRemark() *RoleUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// AddRoleMenuIDs adds the "role_menus" edge to the RoleMenu entity by IDs.
func (ru *RoleUpdate) AddRoleMenuIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddRoleMenuIDs(ids...)
	return ru
}

// AddRoleMenus adds the "role_menus" edges to the RoleMenu entity.
func (ru *RoleUpdate) AddRoleMenus(r ...*RoleMenu) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoleMenuIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (ru *RoleUpdate) AddUserRoleIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddUserRoleIDs(ids...)
	return ru
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (ru *RoleUpdate) AddUserRoles(u ...*UserRole) *RoleUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddUserRoleIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearRoleMenus clears all "role_menus" edges to the RoleMenu entity.
func (ru *RoleUpdate) ClearRoleMenus() *RoleUpdate {
	ru.mutation.ClearRoleMenus()
	return ru
}

// RemoveRoleMenuIDs removes the "role_menus" edge to RoleMenu entities by IDs.
func (ru *RoleUpdate) RemoveRoleMenuIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemoveRoleMenuIDs(ids...)
	return ru
}

// RemoveRoleMenus removes "role_menus" edges to RoleMenu entities.
func (ru *RoleUpdate) RemoveRoleMenus(r ...*RoleMenu) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoleMenuIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (ru *RoleUpdate) ClearUserRoles() *RoleUpdate {
	ru.mutation.ClearUserRoles()
	return ru
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (ru *RoleUpdate) RemoveUserRoleIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemoveUserRoleIDs(ids...)
	return ru
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (ru *RoleUpdate) RemoveUserRoles(u ...*UserRole) *RoleUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveUserRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if role.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized role.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Description(); ok {
		if err := role.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Role.description": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Role.status": %w`, err)}
		}
	}
	if v, ok := ru.mutation.DataScope(); ok {
		if err := role.DataScopeValidator(v); err != nil {
			return &ValidationError{Name: "data_scope", err: fmt.Errorf(`ent: validator failed for field "Role.data_scope": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Remark(); ok {
		if err := role.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Role.remark": %w`, err)}
		}
	}
	return nil
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(role.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.DeptIds(); ok {
		_spec.SetField(role.FieldDeptIds, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedDeptIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldDeptIds, value)
		})
	}
	if ru.mutation.DeptIdsCleared() {
		_spec.ClearField(role.FieldDeptIds, field.TypeJSON)
	}
	if value, ok := ru.mutation.IsBuiltin(); ok {
		_spec.SetField(role.FieldIsBuiltin, field.TypeBool, value)
	}
	if value, ok := ru.mutation.SortOrder(); ok {
		_spec.SetField(role.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedSortOrder(); ok {
		_spec.AddField(role.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if ru.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if ru.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !ru.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !ru.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoleUpdateOne) SetDeletedAt(i int64) *RoleUpdateOne {
	ruo.mutation.ResetDeletedAt()
	ruo.mutation.SetDeletedAt(i)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeletedAt(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetDeletedAt(*i)
	}
	return ruo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ruo *RoleUpdateOne) AddDeletedAt(i int64) *RoleUpdateOne {
	ruo.mutation.AddDeletedAt(i)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetCode sets the "code" field.
func (ruo *RoleUpdateOne) SetCode(s string) *RoleUpdateOne {
	ruo.mutation.SetCode(s)
	return ruo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableCode(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetCode(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoleUpdateOne) SetDescription(s string) *RoleUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDescription(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoleUpdateOne) ClearDescription() *RoleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RoleUpdateOne) SetStatus(r role.Status) *RoleUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableStatus(r *role.Status) *RoleUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetDataScope sets the "data_scope" field.
func (ruo *RoleUpdateOne) SetDataScope(rs role.DataScope) *RoleUpdateOne {
	ruo.mutation.SetDataScope(rs)
	return ruo
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDataScope(rs *role.DataScope) *RoleUpdateOne {
	if rs != nil {
		ruo.SetDataScope(*rs)
	}
	return ruo
}

// SetDeptIds sets the "dept_ids" field.
func (ruo *RoleUpdateOne) SetDeptIds(s []string) *RoleUpdateOne {
	ruo.mutation.SetDeptIds(s)
	return ruo
}

// AppendDeptIds appends s to the "dept_ids" field.
func (ruo *RoleUpdateOne) AppendDeptIds(s []string) *RoleUpdateOne {
	ruo.mutation.AppendDeptIds(s)
	return ruo
}

// ClearDeptIds clears the value of the "dept_ids" field.
func (ruo *RoleUpdateOne) ClearDeptIds() *RoleUpdateOne {
	ruo.mutation.ClearDeptIds()
	return ruo
}

// SetIsBuiltin sets the "is_builtin" field.
func (ruo *RoleUpdateOne) SetIsBuiltin(b bool) *RoleUpdateOne {
	ruo.mutation.SetIsBuiltin(b)
	return ruo
}

// SetNillableIsBuiltin sets the "is_builtin" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableIsBuiltin(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetIsBuiltin(*b)
	}
	return ruo
}

// SetSortOrder sets the "sort_order" field.
func (ruo *RoleUpdateOne) SetSortOrder(i int) *RoleUpdateOne {
	ruo.mutation.ResetSortOrder()
	ruo.mutation.SetSortOrder(i)
	return ruo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableSortOrder(i *int) *RoleUpdateOne {
	if i != nil {
		ruo.SetSortOrder(*i)
	}
	return ruo
}

// AddSortOrder adds i to the "sort_order" field.
func (ruo *RoleUpdateOne) AddSortOrder(i int) *RoleUpdateOne {
	ruo.mutation.AddSortOrder(i)
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RoleUpdateOne) SetRemark(s string) *RoleUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRemark(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *RoleUpdateOne) ClearRemark() *RoleUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// AddRoleMenuIDs adds the "role_menus" edge to the RoleMenu entity by IDs.
func (ruo *RoleUpdateOne) AddRoleMenuIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddRoleMenuIDs(ids...)
	return ruo
}

// AddRoleMenus adds the "role_menus" edges to the RoleMenu entity.
func (ruo *RoleUpdateOne) AddRoleMenus(r ...*RoleMenu) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoleMenuIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (ruo *RoleUpdateOne) AddUserRoleIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddUserRoleIDs(ids...)
	return ruo
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (ruo *RoleUpdateOne) AddUserRoles(u ...*UserRole) *RoleUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddUserRoleIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearRoleMenus clears all "role_menus" edges to the RoleMenu entity.
func (ruo *RoleUpdateOne) ClearRoleMenus() *RoleUpdateOne {
	ruo.mutation.ClearRoleMenus()
	return ruo
}

// RemoveRoleMenuIDs removes the "role_menus" edge to RoleMenu entities by IDs.
func (ruo *RoleUpdateOne) RemoveRoleMenuIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemoveRoleMenuIDs(ids...)
	return ruo
}

// RemoveRoleMenus removes "role_menus" edges to RoleMenu entities.
func (ruo *RoleUpdateOne) RemoveRoleMenus(r ...*RoleMenu) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoleMenuIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (ruo *RoleUpdateOne) ClearUserRoles() *RoleUpdateOne {
	ruo.mutation.ClearUserRoles()
	return ruo
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (ruo *RoleUpdateOne) RemoveUserRoleIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemoveUserRoleIDs(ids...)
	return ruo
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (ruo *RoleUpdateOne) RemoveUserRoles(u ...*UserRole) *RoleUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveUserRoleIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if role.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized role.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Description(); ok {
		if err := role.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Role.description": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Role.status": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.DataScope(); ok {
		if err := role.DataScopeValidator(v); err != nil {
			return &ValidationError{Name: "data_scope", err: fmt.Errorf(`ent: validator failed for field "Role.data_scope": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Remark(); ok {
		if err := role.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "Role.remark": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(role.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.DeptIds(); ok {
		_spec.SetField(role.FieldDeptIds, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedDeptIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, role.FieldDeptIds, value)
		})
	}
	if ruo.mutation.DeptIdsCleared() {
		_spec.ClearField(role.FieldDeptIds, field.TypeJSON)
	}
	if value, ok := ruo.mutation.IsBuiltin(); ok {
		_spec.SetField(role.FieldIsBuiltin, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.SortOrder(); ok {
		_spec.SetField(role.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedSortOrder(); ok {
		_spec.AddField(role.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if ruo.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if ruo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !ruo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.RoleMenusTable,
			Columns: []string{role.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !ruo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserRolesTable,
			Columns: []string{role.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
