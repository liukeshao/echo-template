// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liukeshao/echo-template/ent/department"
	"github.com/liukeshao/echo-template/ent/position"
	"github.com/liukeshao/echo-template/ent/predicate"
	"github.com/liukeshao/echo-template/ent/token"
	"github.com/liukeshao/echo-template/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(i int64) *UserUpdate {
	uu.mutation.ResetDeletedAt()
	uu.mutation.SetDeletedAt(i)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDeletedAt(*i)
	}
	return uu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (uu *UserUpdate) AddDeletedAt(i int64) *UserUpdate {
	uu.mutation.AddDeletedAt(i)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetRealName sets the "real_name" field.
func (uu *UserUpdate) SetRealName(s string) *UserUpdate {
	uu.mutation.SetRealName(s)
	return uu
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRealName(s *string) *UserUpdate {
	if s != nil {
		uu.SetRealName(*s)
	}
	return uu
}

// ClearRealName clears the value of the "real_name" field.
func (uu *UserUpdate) ClearRealName() *UserUpdate {
	uu.mutation.ClearRealName()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetDepartment sets the "department" field.
func (uu *UserUpdate) SetDepartment(s string) *UserUpdate {
	uu.mutation.SetDepartment(s)
	return uu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartment(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartment(*s)
	}
	return uu
}

// ClearDepartment clears the value of the "department" field.
func (uu *UserUpdate) ClearDepartment() *UserUpdate {
	uu.mutation.ClearDepartment()
	return uu
}

// SetDepartmentID sets the "department_id" field.
func (uu *UserUpdate) SetDepartmentID(s string) *UserUpdate {
	uu.mutation.SetDepartmentID(s)
	return uu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartmentID(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartmentID(*s)
	}
	return uu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (uu *UserUpdate) ClearDepartmentID() *UserUpdate {
	uu.mutation.ClearDepartmentID()
	return uu
}

// SetPosition sets the "position" field.
func (uu *UserUpdate) SetPosition(s string) *UserUpdate {
	uu.mutation.SetPosition(s)
	return uu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePosition(s *string) *UserUpdate {
	if s != nil {
		uu.SetPosition(*s)
	}
	return uu
}

// ClearPosition clears the value of the "position" field.
func (uu *UserUpdate) ClearPosition() *UserUpdate {
	uu.mutation.ClearPosition()
	return uu
}

// SetPositionID sets the "position_id" field.
func (uu *UserUpdate) SetPositionID(s string) *UserUpdate {
	uu.mutation.SetPositionID(s)
	return uu
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePositionID(s *string) *UserUpdate {
	if s != nil {
		uu.SetPositionID(*s)
	}
	return uu
}

// ClearPositionID clears the value of the "position_id" field.
func (uu *UserUpdate) ClearPositionID() *UserUpdate {
	uu.mutation.ClearPositionID()
	return uu
}

// SetRoles sets the "roles" field.
func (uu *UserUpdate) SetRoles(s string) *UserUpdate {
	uu.mutation.SetRoles(s)
	return uu
}

// SetNillableRoles sets the "roles" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoles(s *string) *UserUpdate {
	if s != nil {
		uu.SetRoles(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *user.Status) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetForceChangePassword sets the "force_change_password" field.
func (uu *UserUpdate) SetForceChangePassword(b bool) *UserUpdate {
	uu.mutation.SetForceChangePassword(b)
	return uu
}

// SetNillableForceChangePassword sets the "force_change_password" field if the given value is not nil.
func (uu *UserUpdate) SetNillableForceChangePassword(b *bool) *UserUpdate {
	if b != nil {
		uu.SetForceChangePassword(*b)
	}
	return uu
}

// SetAllowMultiLogin sets the "allow_multi_login" field.
func (uu *UserUpdate) SetAllowMultiLogin(b bool) *UserUpdate {
	uu.mutation.SetAllowMultiLogin(b)
	return uu
}

// SetNillableAllowMultiLogin sets the "allow_multi_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAllowMultiLogin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAllowMultiLogin(*b)
	}
	return uu
}

// SetLastLoginAt sets the "last_login_at" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uu *UserUpdate) ClearLastLoginAt() *UserUpdate {
	uu.mutation.ClearLastLoginAt()
	return uu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uu *UserUpdate) SetLastLoginIP(s string) *UserUpdate {
	uu.mutation.SetLastLoginIP(s)
	return uu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastLoginIP(*s)
	}
	return uu
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uu *UserUpdate) ClearLastLoginIP() *UserUpdate {
	uu.mutation.ClearLastLoginIP()
	return uu
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uu *UserUpdate) AddTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTokenIDs(ids...)
	return uu
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uu *UserUpdate) AddTokens(t ...*Token) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTokenIDs(ids...)
}

// SetDepartmentRelID sets the "department_rel" edge to the Department entity by ID.
func (uu *UserUpdate) SetDepartmentRelID(id string) *UserUpdate {
	uu.mutation.SetDepartmentRelID(id)
	return uu
}

// SetNillableDepartmentRelID sets the "department_rel" edge to the Department entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartmentRelID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetDepartmentRelID(*id)
	}
	return uu
}

// SetDepartmentRel sets the "department_rel" edge to the Department entity.
func (uu *UserUpdate) SetDepartmentRel(d *Department) *UserUpdate {
	return uu.SetDepartmentRelID(d.ID)
}

// SetPositionRelID sets the "position_rel" edge to the Position entity by ID.
func (uu *UserUpdate) SetPositionRelID(id string) *UserUpdate {
	uu.mutation.SetPositionRelID(id)
	return uu
}

// SetNillablePositionRelID sets the "position_rel" edge to the Position entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillablePositionRelID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetPositionRelID(*id)
	}
	return uu
}

// SetPositionRel sets the "position_rel" edge to the Position entity.
func (uu *UserUpdate) SetPositionRel(p *Position) *UserUpdate {
	return uu.SetPositionRelID(p.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uu *UserUpdate) ClearTokens() *UserUpdate {
	uu.mutation.ClearTokens()
	return uu
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uu *UserUpdate) RemoveTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTokenIDs(ids...)
	return uu
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uu *UserUpdate) RemoveTokens(t ...*Token) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTokenIDs(ids...)
}

// ClearDepartmentRel clears the "department_rel" edge to the Department entity.
func (uu *UserUpdate) ClearDepartmentRel() *UserUpdate {
	uu.mutation.ClearDepartmentRel()
	return uu
}

// ClearPositionRel clears the "position_rel" edge to the Position entity.
func (uu *UserUpdate) ClearPositionRel() *UserUpdate {
	uu.mutation.ClearPositionRel()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uu.mutation.RealName(); ok {
		if err := user.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`ent: validator failed for field "User.real_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DepartmentID(); ok {
		if err := user.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "User.department_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Position(); ok {
		if err := user.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "User.position": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PositionID(); ok {
		if err := user.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "User.position_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Roles(); ok {
		if err := user.RolesValidator(v); err != nil {
			return &ValidationError{Name: "roles", err: fmt.Errorf(`ent: validator failed for field "User.roles": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.RealName(); ok {
		_spec.SetField(user.FieldRealName, field.TypeString, value)
	}
	if uu.mutation.RealNameCleared() {
		_spec.ClearField(user.FieldRealName, field.TypeString)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uu.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uu.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if uu.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := uu.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.ForceChangePassword(); ok {
		_spec.SetField(user.FieldForceChangePassword, field.TypeBool, value)
	}
	if value, ok := uu.mutation.AllowMultiLogin(); ok {
		_spec.SetField(user.FieldAllowMultiLogin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uu.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uu.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DepartmentRelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.DepartmentRelTable,
			Columns: []string{user.DepartmentRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DepartmentRelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.DepartmentRelTable,
			Columns: []string{user.DepartmentRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PositionRelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.PositionRelTable,
			Columns: []string{user.PositionRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PositionRelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.PositionRelTable,
			Columns: []string{user.PositionRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(i int64) *UserUpdateOne {
	uuo.mutation.ResetDeletedAt()
	uuo.mutation.SetDeletedAt(i)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDeletedAt(*i)
	}
	return uuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (uuo *UserUpdateOne) AddDeletedAt(i int64) *UserUpdateOne {
	uuo.mutation.AddDeletedAt(i)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetRealName sets the "real_name" field.
func (uuo *UserUpdateOne) SetRealName(s string) *UserUpdateOne {
	uuo.mutation.SetRealName(s)
	return uuo
}

// SetNillableRealName sets the "real_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRealName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRealName(*s)
	}
	return uuo
}

// ClearRealName clears the value of the "real_name" field.
func (uuo *UserUpdateOne) ClearRealName() *UserUpdateOne {
	uuo.mutation.ClearRealName()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetDepartment sets the "department" field.
func (uuo *UserUpdateOne) SetDepartment(s string) *UserUpdateOne {
	uuo.mutation.SetDepartment(s)
	return uuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartment(*s)
	}
	return uuo
}

// ClearDepartment clears the value of the "department" field.
func (uuo *UserUpdateOne) ClearDepartment() *UserUpdateOne {
	uuo.mutation.ClearDepartment()
	return uuo
}

// SetDepartmentID sets the "department_id" field.
func (uuo *UserUpdateOne) SetDepartmentID(s string) *UserUpdateOne {
	uuo.mutation.SetDepartmentID(s)
	return uuo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartmentID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartmentID(*s)
	}
	return uuo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (uuo *UserUpdateOne) ClearDepartmentID() *UserUpdateOne {
	uuo.mutation.ClearDepartmentID()
	return uuo
}

// SetPosition sets the "position" field.
func (uuo *UserUpdateOne) SetPosition(s string) *UserUpdateOne {
	uuo.mutation.SetPosition(s)
	return uuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePosition(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPosition(*s)
	}
	return uuo
}

// ClearPosition clears the value of the "position" field.
func (uuo *UserUpdateOne) ClearPosition() *UserUpdateOne {
	uuo.mutation.ClearPosition()
	return uuo
}

// SetPositionID sets the "position_id" field.
func (uuo *UserUpdateOne) SetPositionID(s string) *UserUpdateOne {
	uuo.mutation.SetPositionID(s)
	return uuo
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePositionID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPositionID(*s)
	}
	return uuo
}

// ClearPositionID clears the value of the "position_id" field.
func (uuo *UserUpdateOne) ClearPositionID() *UserUpdateOne {
	uuo.mutation.ClearPositionID()
	return uuo
}

// SetRoles sets the "roles" field.
func (uuo *UserUpdateOne) SetRoles(s string) *UserUpdateOne {
	uuo.mutation.SetRoles(s)
	return uuo
}

// SetNillableRoles sets the "roles" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoles(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRoles(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *user.Status) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetForceChangePassword sets the "force_change_password" field.
func (uuo *UserUpdateOne) SetForceChangePassword(b bool) *UserUpdateOne {
	uuo.mutation.SetForceChangePassword(b)
	return uuo
}

// SetNillableForceChangePassword sets the "force_change_password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableForceChangePassword(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetForceChangePassword(*b)
	}
	return uuo
}

// SetAllowMultiLogin sets the "allow_multi_login" field.
func (uuo *UserUpdateOne) SetAllowMultiLogin(b bool) *UserUpdateOne {
	uuo.mutation.SetAllowMultiLogin(b)
	return uuo
}

// SetNillableAllowMultiLogin sets the "allow_multi_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAllowMultiLogin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAllowMultiLogin(*b)
	}
	return uuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uuo *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	uuo.mutation.ClearLastLoginAt()
	return uuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uuo *UserUpdateOne) SetLastLoginIP(s string) *UserUpdateOne {
	uuo.mutation.SetLastLoginIP(s)
	return uuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastLoginIP(*s)
	}
	return uuo
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uuo *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	uuo.mutation.ClearLastLoginIP()
	return uuo
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uuo *UserUpdateOne) AddTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTokenIDs(ids...)
	return uuo
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) AddTokens(t ...*Token) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTokenIDs(ids...)
}

// SetDepartmentRelID sets the "department_rel" edge to the Department entity by ID.
func (uuo *UserUpdateOne) SetDepartmentRelID(id string) *UserUpdateOne {
	uuo.mutation.SetDepartmentRelID(id)
	return uuo
}

// SetNillableDepartmentRelID sets the "department_rel" edge to the Department entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartmentRelID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetDepartmentRelID(*id)
	}
	return uuo
}

// SetDepartmentRel sets the "department_rel" edge to the Department entity.
func (uuo *UserUpdateOne) SetDepartmentRel(d *Department) *UserUpdateOne {
	return uuo.SetDepartmentRelID(d.ID)
}

// SetPositionRelID sets the "position_rel" edge to the Position entity by ID.
func (uuo *UserUpdateOne) SetPositionRelID(id string) *UserUpdateOne {
	uuo.mutation.SetPositionRelID(id)
	return uuo
}

// SetNillablePositionRelID sets the "position_rel" edge to the Position entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePositionRelID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetPositionRelID(*id)
	}
	return uuo
}

// SetPositionRel sets the "position_rel" edge to the Position entity.
func (uuo *UserUpdateOne) SetPositionRel(p *Position) *UserUpdateOne {
	return uuo.SetPositionRelID(p.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) ClearTokens() *UserUpdateOne {
	uuo.mutation.ClearTokens()
	return uuo
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uuo *UserUpdateOne) RemoveTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTokenIDs(ids...)
	return uuo
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uuo *UserUpdateOne) RemoveTokens(t ...*Token) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTokenIDs(ids...)
}

// ClearDepartmentRel clears the "department_rel" edge to the Department entity.
func (uuo *UserUpdateOne) ClearDepartmentRel() *UserUpdateOne {
	uuo.mutation.ClearDepartmentRel()
	return uuo
}

// ClearPositionRel clears the "position_rel" edge to the Position entity.
func (uuo *UserUpdateOne) ClearPositionRel() *UserUpdateOne {
	uuo.mutation.ClearPositionRel()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.RealName(); ok {
		if err := user.RealNameValidator(v); err != nil {
			return &ValidationError{Name: "real_name", err: fmt.Errorf(`ent: validator failed for field "User.real_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DepartmentID(); ok {
		if err := user.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "User.department_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Position(); ok {
		if err := user.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "User.position": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PositionID(); ok {
		if err := user.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "User.position_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Roles(); ok {
		if err := user.RolesValidator(v); err != nil {
			return &ValidationError{Name: "roles", err: fmt.Errorf(`ent: validator failed for field "User.roles": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(user.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.RealName(); ok {
		_spec.SetField(user.FieldRealName, field.TypeString, value)
	}
	if uuo.mutation.RealNameCleared() {
		_spec.ClearField(user.FieldRealName, field.TypeString)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uuo.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uuo.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if uuo.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := uuo.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.ForceChangePassword(); ok {
		_spec.SetField(user.FieldForceChangePassword, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.AllowMultiLogin(); ok {
		_spec.SetField(user.FieldAllowMultiLogin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uuo.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DepartmentRelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.DepartmentRelTable,
			Columns: []string{user.DepartmentRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DepartmentRelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.DepartmentRelTable,
			Columns: []string{user.DepartmentRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PositionRelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.PositionRelTable,
			Columns: []string{user.PositionRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PositionRelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.PositionRelTable,
			Columns: []string{user.PositionRelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
