// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/liukeshao/echo-template/ent/department"
	"github.com/liukeshao/echo-template/ent/menu"
	"github.com/liukeshao/echo-template/ent/position"
	"github.com/liukeshao/echo-template/ent/role"
	"github.com/liukeshao/echo-template/ent/rolemenu"
	"github.com/liukeshao/echo-template/ent/schema"
	"github.com/liukeshao/echo-template/ent/token"
	"github.com/liukeshao/echo-template/ent/user"
	"github.com/liukeshao/echo-template/ent/userrole"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	departmentMixin := schema.Department{}.Mixin()
	departmentMixinHooks0 := departmentMixin[0].Hooks()
	department.Hooks[0] = departmentMixinHooks0[0]
	departmentMixinInters0 := departmentMixin[0].Interceptors()
	department.Interceptors[0] = departmentMixinInters0[0]
	departmentMixinFields0 := departmentMixin[0].Fields()
	_ = departmentMixinFields0
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescCreatedAt is the schema descriptor for created_at field.
	departmentDescCreatedAt := departmentMixinFields0[1].Descriptor()
	// department.DefaultCreatedAt holds the default value on creation for the created_at field.
	department.DefaultCreatedAt = departmentDescCreatedAt.Default.(func() time.Time)
	// departmentDescUpdatedAt is the schema descriptor for updated_at field.
	departmentDescUpdatedAt := departmentMixinFields0[2].Descriptor()
	// department.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	department.DefaultUpdatedAt = departmentDescUpdatedAt.Default.(func() time.Time)
	// department.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	department.UpdateDefaultUpdatedAt = departmentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// departmentDescDeletedAt is the schema descriptor for deleted_at field.
	departmentDescDeletedAt := departmentMixinFields0[3].Descriptor()
	// department.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	department.DefaultDeletedAt = departmentDescDeletedAt.Default.(int64)
	// departmentDescParentID is the schema descriptor for parent_id field.
	departmentDescParentID := departmentFields[0].Descriptor()
	// department.ParentIDValidator is a validator for the "parent_id" field. It is called by the builders before save.
	department.ParentIDValidator = departmentDescParentID.Validators[0].(func(string) error)
	// departmentDescName is the schema descriptor for name field.
	departmentDescName := departmentFields[1].Descriptor()
	// department.NameValidator is a validator for the "name" field. It is called by the builders before save.
	department.NameValidator = func() func(string) error {
		validators := departmentDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// departmentDescCode is the schema descriptor for code field.
	departmentDescCode := departmentFields[2].Descriptor()
	// department.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	department.CodeValidator = func() func(string) error {
		validators := departmentDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// departmentDescManager is the schema descriptor for manager field.
	departmentDescManager := departmentFields[3].Descriptor()
	// department.ManagerValidator is a validator for the "manager" field. It is called by the builders before save.
	department.ManagerValidator = departmentDescManager.Validators[0].(func(string) error)
	// departmentDescManagerID is the schema descriptor for manager_id field.
	departmentDescManagerID := departmentFields[4].Descriptor()
	// department.ManagerIDValidator is a validator for the "manager_id" field. It is called by the builders before save.
	department.ManagerIDValidator = departmentDescManagerID.Validators[0].(func(string) error)
	// departmentDescPhone is the schema descriptor for phone field.
	departmentDescPhone := departmentFields[5].Descriptor()
	// department.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	department.PhoneValidator = departmentDescPhone.Validators[0].(func(string) error)
	// departmentDescDescription is the schema descriptor for description field.
	departmentDescDescription := departmentFields[6].Descriptor()
	// department.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	department.DescriptionValidator = departmentDescDescription.Validators[0].(func(string) error)
	// departmentDescSortOrder is the schema descriptor for sort_order field.
	departmentDescSortOrder := departmentFields[7].Descriptor()
	// department.DefaultSortOrder holds the default value on creation for the sort_order field.
	department.DefaultSortOrder = departmentDescSortOrder.Default.(int)
	// departmentDescLevel is the schema descriptor for level field.
	departmentDescLevel := departmentFields[9].Descriptor()
	// department.DefaultLevel holds the default value on creation for the level field.
	department.DefaultLevel = departmentDescLevel.Default.(int)
	// departmentDescPath is the schema descriptor for path field.
	departmentDescPath := departmentFields[10].Descriptor()
	// department.DefaultPath holds the default value on creation for the path field.
	department.DefaultPath = departmentDescPath.Default.(string)
	// department.PathValidator is a validator for the "path" field. It is called by the builders before save.
	department.PathValidator = departmentDescPath.Validators[0].(func(string) error)
	// departmentDescID is the schema descriptor for id field.
	departmentDescID := departmentMixinFields0[0].Descriptor()
	// department.IDValidator is a validator for the "id" field. It is called by the builders before save.
	department.IDValidator = func() func(string) error {
		validators := departmentDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	menuMixin := schema.Menu{}.Mixin()
	menuMixinHooks0 := menuMixin[0].Hooks()
	menu.Hooks[0] = menuMixinHooks0[0]
	menuMixinInters0 := menuMixin[0].Interceptors()
	menu.Interceptors[0] = menuMixinInters0[0]
	menuMixinFields0 := menuMixin[0].Fields()
	_ = menuMixinFields0
	menuFields := schema.Menu{}.Fields()
	_ = menuFields
	// menuDescCreatedAt is the schema descriptor for created_at field.
	menuDescCreatedAt := menuMixinFields0[1].Descriptor()
	// menu.DefaultCreatedAt holds the default value on creation for the created_at field.
	menu.DefaultCreatedAt = menuDescCreatedAt.Default.(func() time.Time)
	// menuDescUpdatedAt is the schema descriptor for updated_at field.
	menuDescUpdatedAt := menuMixinFields0[2].Descriptor()
	// menu.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	menu.DefaultUpdatedAt = menuDescUpdatedAt.Default.(func() time.Time)
	// menu.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	menu.UpdateDefaultUpdatedAt = menuDescUpdatedAt.UpdateDefault.(func() time.Time)
	// menuDescDeletedAt is the schema descriptor for deleted_at field.
	menuDescDeletedAt := menuMixinFields0[3].Descriptor()
	// menu.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	menu.DefaultDeletedAt = menuDescDeletedAt.Default.(int64)
	// menuDescName is the schema descriptor for name field.
	menuDescName := menuFields[0].Descriptor()
	// menu.NameValidator is a validator for the "name" field. It is called by the builders before save.
	menu.NameValidator = func() func(string) error {
		validators := menuDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// menuDescParentID is the schema descriptor for parent_id field.
	menuDescParentID := menuFields[2].Descriptor()
	// menu.ParentIDValidator is a validator for the "parent_id" field. It is called by the builders before save.
	menu.ParentIDValidator = menuDescParentID.Validators[0].(func(string) error)
	// menuDescPath is the schema descriptor for path field.
	menuDescPath := menuFields[3].Descriptor()
	// menu.PathValidator is a validator for the "path" field. It is called by the builders before save.
	menu.PathValidator = menuDescPath.Validators[0].(func(string) error)
	// menuDescComponent is the schema descriptor for component field.
	menuDescComponent := menuFields[4].Descriptor()
	// menu.ComponentValidator is a validator for the "component" field. It is called by the builders before save.
	menu.ComponentValidator = menuDescComponent.Validators[0].(func(string) error)
	// menuDescIcon is the schema descriptor for icon field.
	menuDescIcon := menuFields[5].Descriptor()
	// menu.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	menu.IconValidator = menuDescIcon.Validators[0].(func(string) error)
	// menuDescSortOrder is the schema descriptor for sort_order field.
	menuDescSortOrder := menuFields[6].Descriptor()
	// menu.DefaultSortOrder holds the default value on creation for the sort_order field.
	menu.DefaultSortOrder = menuDescSortOrder.Default.(int)
	// menuDescPermission is the schema descriptor for permission field.
	menuDescPermission := menuFields[7].Descriptor()
	// menu.PermissionValidator is a validator for the "permission" field. It is called by the builders before save.
	menu.PermissionValidator = menuDescPermission.Validators[0].(func(string) error)
	// menuDescVisible is the schema descriptor for visible field.
	menuDescVisible := menuFields[9].Descriptor()
	// menu.DefaultVisible holds the default value on creation for the visible field.
	menu.DefaultVisible = menuDescVisible.Default.(bool)
	// menuDescKeepAlive is the schema descriptor for keep_alive field.
	menuDescKeepAlive := menuFields[10].Descriptor()
	// menu.DefaultKeepAlive holds the default value on creation for the keep_alive field.
	menu.DefaultKeepAlive = menuDescKeepAlive.Default.(bool)
	// menuDescExternalLink is the schema descriptor for external_link field.
	menuDescExternalLink := menuFields[11].Descriptor()
	// menu.ExternalLinkValidator is a validator for the "external_link" field. It is called by the builders before save.
	menu.ExternalLinkValidator = menuDescExternalLink.Validators[0].(func(string) error)
	// menuDescRemark is the schema descriptor for remark field.
	menuDescRemark := menuFields[12].Descriptor()
	// menu.RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	menu.RemarkValidator = menuDescRemark.Validators[0].(func(string) error)
	// menuDescID is the schema descriptor for id field.
	menuDescID := menuMixinFields0[0].Descriptor()
	// menu.IDValidator is a validator for the "id" field. It is called by the builders before save.
	menu.IDValidator = func() func(string) error {
		validators := menuDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	positionMixin := schema.Position{}.Mixin()
	positionMixinHooks0 := positionMixin[0].Hooks()
	position.Hooks[0] = positionMixinHooks0[0]
	positionMixinInters0 := positionMixin[0].Interceptors()
	position.Interceptors[0] = positionMixinInters0[0]
	positionMixinFields0 := positionMixin[0].Fields()
	_ = positionMixinFields0
	positionFields := schema.Position{}.Fields()
	_ = positionFields
	// positionDescCreatedAt is the schema descriptor for created_at field.
	positionDescCreatedAt := positionMixinFields0[1].Descriptor()
	// position.DefaultCreatedAt holds the default value on creation for the created_at field.
	position.DefaultCreatedAt = positionDescCreatedAt.Default.(func() time.Time)
	// positionDescUpdatedAt is the schema descriptor for updated_at field.
	positionDescUpdatedAt := positionMixinFields0[2].Descriptor()
	// position.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	position.DefaultUpdatedAt = positionDescUpdatedAt.Default.(func() time.Time)
	// position.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	position.UpdateDefaultUpdatedAt = positionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// positionDescDeletedAt is the schema descriptor for deleted_at field.
	positionDescDeletedAt := positionMixinFields0[3].Descriptor()
	// position.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	position.DefaultDeletedAt = positionDescDeletedAt.Default.(int64)
	// positionDescName is the schema descriptor for name field.
	positionDescName := positionFields[0].Descriptor()
	// position.NameValidator is a validator for the "name" field. It is called by the builders before save.
	position.NameValidator = func() func(string) error {
		validators := positionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// positionDescCode is the schema descriptor for code field.
	positionDescCode := positionFields[1].Descriptor()
	// position.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	position.CodeValidator = func() func(string) error {
		validators := positionDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// positionDescDescription is the schema descriptor for description field.
	positionDescDescription := positionFields[2].Descriptor()
	// position.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	position.DescriptionValidator = positionDescDescription.Validators[0].(func(string) error)
	// positionDescSortOrder is the schema descriptor for sort_order field.
	positionDescSortOrder := positionFields[3].Descriptor()
	// position.DefaultSortOrder holds the default value on creation for the sort_order field.
	position.DefaultSortOrder = positionDescSortOrder.Default.(int)
	// positionDescID is the schema descriptor for id field.
	positionDescID := positionMixinFields0[0].Descriptor()
	// position.IDValidator is a validator for the "id" field. It is called by the builders before save.
	position.IDValidator = func() func(string) error {
		validators := positionDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	roleMixin := schema.Role{}.Mixin()
	roleMixinHooks0 := roleMixin[0].Hooks()
	role.Hooks[0] = roleMixinHooks0[0]
	roleMixinInters0 := roleMixin[0].Interceptors()
	role.Interceptors[0] = roleMixinInters0[0]
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields0[1].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleMixinFields0[2].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roleDescDeletedAt is the schema descriptor for deleted_at field.
	roleDescDeletedAt := roleMixinFields0[3].Descriptor()
	// role.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	role.DefaultDeletedAt = roleDescDeletedAt.Default.(int64)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescCode is the schema descriptor for code field.
	roleDescCode := roleFields[1].Descriptor()
	// role.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	role.CodeValidator = func() func(string) error {
		validators := roleDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescDescription is the schema descriptor for description field.
	roleDescDescription := roleFields[2].Descriptor()
	// role.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	role.DescriptionValidator = roleDescDescription.Validators[0].(func(string) error)
	// roleDescIsBuiltin is the schema descriptor for is_builtin field.
	roleDescIsBuiltin := roleFields[6].Descriptor()
	// role.DefaultIsBuiltin holds the default value on creation for the is_builtin field.
	role.DefaultIsBuiltin = roleDescIsBuiltin.Default.(bool)
	// roleDescSortOrder is the schema descriptor for sort_order field.
	roleDescSortOrder := roleFields[7].Descriptor()
	// role.DefaultSortOrder holds the default value on creation for the sort_order field.
	role.DefaultSortOrder = roleDescSortOrder.Default.(int)
	// roleDescRemark is the schema descriptor for remark field.
	roleDescRemark := roleFields[8].Descriptor()
	// role.RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	role.RemarkValidator = roleDescRemark.Validators[0].(func(string) error)
	// roleDescID is the schema descriptor for id field.
	roleDescID := roleMixinFields0[0].Descriptor()
	// role.IDValidator is a validator for the "id" field. It is called by the builders before save.
	role.IDValidator = func() func(string) error {
		validators := roleDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	rolemenuMixin := schema.RoleMenu{}.Mixin()
	rolemenuMixinHooks0 := rolemenuMixin[0].Hooks()
	rolemenu.Hooks[0] = rolemenuMixinHooks0[0]
	rolemenuMixinInters0 := rolemenuMixin[0].Interceptors()
	rolemenu.Interceptors[0] = rolemenuMixinInters0[0]
	rolemenuMixinFields0 := rolemenuMixin[0].Fields()
	_ = rolemenuMixinFields0
	rolemenuFields := schema.RoleMenu{}.Fields()
	_ = rolemenuFields
	// rolemenuDescCreatedAt is the schema descriptor for created_at field.
	rolemenuDescCreatedAt := rolemenuMixinFields0[1].Descriptor()
	// rolemenu.DefaultCreatedAt holds the default value on creation for the created_at field.
	rolemenu.DefaultCreatedAt = rolemenuDescCreatedAt.Default.(func() time.Time)
	// rolemenuDescUpdatedAt is the schema descriptor for updated_at field.
	rolemenuDescUpdatedAt := rolemenuMixinFields0[2].Descriptor()
	// rolemenu.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	rolemenu.DefaultUpdatedAt = rolemenuDescUpdatedAt.Default.(func() time.Time)
	// rolemenu.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	rolemenu.UpdateDefaultUpdatedAt = rolemenuDescUpdatedAt.UpdateDefault.(func() time.Time)
	// rolemenuDescDeletedAt is the schema descriptor for deleted_at field.
	rolemenuDescDeletedAt := rolemenuMixinFields0[3].Descriptor()
	// rolemenu.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	rolemenu.DefaultDeletedAt = rolemenuDescDeletedAt.Default.(int64)
	// rolemenuDescRoleID is the schema descriptor for role_id field.
	rolemenuDescRoleID := rolemenuFields[0].Descriptor()
	// rolemenu.RoleIDValidator is a validator for the "role_id" field. It is called by the builders before save.
	rolemenu.RoleIDValidator = func() func(string) error {
		validators := rolemenuDescRoleID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(role string) error {
			for _, fn := range fns {
				if err := fn(role); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rolemenuDescMenuID is the schema descriptor for menu_id field.
	rolemenuDescMenuID := rolemenuFields[1].Descriptor()
	// rolemenu.MenuIDValidator is a validator for the "menu_id" field. It is called by the builders before save.
	rolemenu.MenuIDValidator = func() func(string) error {
		validators := rolemenuDescMenuID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(menu string) error {
			for _, fn := range fns {
				if err := fn(menu); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rolemenuDescID is the schema descriptor for id field.
	rolemenuDescID := rolemenuMixinFields0[0].Descriptor()
	// rolemenu.IDValidator is a validator for the "id" field. It is called by the builders before save.
	rolemenu.IDValidator = func() func(string) error {
		validators := rolemenuDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinHooks0 := tokenMixin[0].Hooks()
	token.Hooks[0] = tokenMixinHooks0[0]
	tokenMixinInters0 := tokenMixin[0].Interceptors()
	token.Interceptors[0] = tokenMixinInters0[0]
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenMixinFields0[1].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescUpdatedAt is the schema descriptor for updated_at field.
	tokenDescUpdatedAt := tokenMixinFields0[2].Descriptor()
	// token.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	token.DefaultUpdatedAt = tokenDescUpdatedAt.Default.(func() time.Time)
	// token.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	token.UpdateDefaultUpdatedAt = tokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tokenDescDeletedAt is the schema descriptor for deleted_at field.
	tokenDescDeletedAt := tokenMixinFields0[3].Descriptor()
	// token.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	token.DefaultDeletedAt = tokenDescDeletedAt.Default.(int64)
	// tokenDescUserID is the schema descriptor for user_id field.
	tokenDescUserID := tokenFields[0].Descriptor()
	// token.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	token.UserIDValidator = func() func(string) error {
		validators := tokenDescUserID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user string) error {
			for _, fn := range fns {
				if err := fn(user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescToken is the schema descriptor for token field.
	tokenDescToken := tokenFields[1].Descriptor()
	// token.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	token.TokenValidator = func() func(string) error {
		validators := tokenDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescIsRevoked is the schema descriptor for is_revoked field.
	tokenDescIsRevoked := tokenFields[4].Descriptor()
	// token.DefaultIsRevoked holds the default value on creation for the is_revoked field.
	token.DefaultIsRevoked = tokenDescIsRevoked.Default.(bool)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenMixinFields0[0].Descriptor()
	// token.IDValidator is a validator for the "id" field. It is called by the builders before save.
	token.IDValidator = func() func(string) error {
		validators := tokenDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	userMixinInters0 := userMixin[0].Interceptors()
	user.Interceptors[0] = userMixinInters0[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescDeletedAt is the schema descriptor for deleted_at field.
	userDescDeletedAt := userMixinFields0[3].Descriptor()
	// user.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	user.DefaultDeletedAt = userDescDeletedAt.Default.(int64)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func(string) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_hash string) error {
			for _, fn := range fns {
				if err := fn(password_hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescRealName is the schema descriptor for real_name field.
	userDescRealName := userFields[3].Descriptor()
	// user.RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	user.RealNameValidator = userDescRealName.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[4].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescDepartment is the schema descriptor for department field.
	userDescDepartment := userFields[5].Descriptor()
	// user.DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	user.DepartmentValidator = userDescDepartment.Validators[0].(func(string) error)
	// userDescDepartmentID is the schema descriptor for department_id field.
	userDescDepartmentID := userFields[6].Descriptor()
	// user.DepartmentIDValidator is a validator for the "department_id" field. It is called by the builders before save.
	user.DepartmentIDValidator = userDescDepartmentID.Validators[0].(func(string) error)
	// userDescPosition is the schema descriptor for position field.
	userDescPosition := userFields[7].Descriptor()
	// user.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	user.PositionValidator = userDescPosition.Validators[0].(func(string) error)
	// userDescPositionID is the schema descriptor for position_id field.
	userDescPositionID := userFields[8].Descriptor()
	// user.PositionIDValidator is a validator for the "position_id" field. It is called by the builders before save.
	user.PositionIDValidator = userDescPositionID.Validators[0].(func(string) error)
	// userDescForceChangePassword is the schema descriptor for force_change_password field.
	userDescForceChangePassword := userFields[10].Descriptor()
	// user.DefaultForceChangePassword holds the default value on creation for the force_change_password field.
	user.DefaultForceChangePassword = userDescForceChangePassword.Default.(bool)
	// userDescAllowMultiLogin is the schema descriptor for allow_multi_login field.
	userDescAllowMultiLogin := userFields[11].Descriptor()
	// user.DefaultAllowMultiLogin holds the default value on creation for the allow_multi_login field.
	user.DefaultAllowMultiLogin = userDescAllowMultiLogin.Default.(bool)
	// userDescLastLoginIP is the schema descriptor for last_login_ip field.
	userDescLastLoginIP := userFields[13].Descriptor()
	// user.LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	user.LastLoginIPValidator = userDescLastLoginIP.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userroleMixin := schema.UserRole{}.Mixin()
	userroleMixinHooks0 := userroleMixin[0].Hooks()
	userrole.Hooks[0] = userroleMixinHooks0[0]
	userroleMixinInters0 := userroleMixin[0].Interceptors()
	userrole.Interceptors[0] = userroleMixinInters0[0]
	userroleMixinFields0 := userroleMixin[0].Fields()
	_ = userroleMixinFields0
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescCreatedAt is the schema descriptor for created_at field.
	userroleDescCreatedAt := userroleMixinFields0[1].Descriptor()
	// userrole.DefaultCreatedAt holds the default value on creation for the created_at field.
	userrole.DefaultCreatedAt = userroleDescCreatedAt.Default.(func() time.Time)
	// userroleDescUpdatedAt is the schema descriptor for updated_at field.
	userroleDescUpdatedAt := userroleMixinFields0[2].Descriptor()
	// userrole.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	userrole.DefaultUpdatedAt = userroleDescUpdatedAt.Default.(func() time.Time)
	// userrole.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	userrole.UpdateDefaultUpdatedAt = userroleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userroleDescDeletedAt is the schema descriptor for deleted_at field.
	userroleDescDeletedAt := userroleMixinFields0[3].Descriptor()
	// userrole.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	userrole.DefaultDeletedAt = userroleDescDeletedAt.Default.(int64)
	// userroleDescUserID is the schema descriptor for user_id field.
	userroleDescUserID := userroleFields[0].Descriptor()
	// userrole.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	userrole.UserIDValidator = func() func(string) error {
		validators := userroleDescUserID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user string) error {
			for _, fn := range fns {
				if err := fn(user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userroleDescRoleID is the schema descriptor for role_id field.
	userroleDescRoleID := userroleFields[1].Descriptor()
	// userrole.RoleIDValidator is a validator for the "role_id" field. It is called by the builders before save.
	userrole.RoleIDValidator = func() func(string) error {
		validators := userroleDescRoleID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(role string) error {
			for _, fn := range fns {
				if err := fn(role); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userroleDescID is the schema descriptor for id field.
	userroleDescID := userroleMixinFields0[0].Descriptor()
	// userrole.IDValidator is a validator for the "id" field. It is called by the builders before save.
	userrole.IDValidator = func() func(string) error {
		validators := userroleDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}

const (
	Version = "v0.14.4"                                         // Version of ent codegen.
	Sum     = "h1:/DhDraSLXIkBhyiVoJeSshr4ZYi7femzhj6/TckzZuI=" // Sum of ent codegen.
)
