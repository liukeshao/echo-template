// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/liukeshao/echo-template/ent/schema"
	"github.com/liukeshao/echo-template/ent/token"
	"github.com/liukeshao/echo-template/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinHooks0 := tokenMixin[0].Hooks()
	token.Hooks[0] = tokenMixinHooks0[0]
	tokenMixinInters0 := tokenMixin[0].Interceptors()
	token.Interceptors[0] = tokenMixinInters0[0]
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenMixinFields0[1].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescUpdatedAt is the schema descriptor for updated_at field.
	tokenDescUpdatedAt := tokenMixinFields0[2].Descriptor()
	// token.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	token.DefaultUpdatedAt = tokenDescUpdatedAt.Default.(func() time.Time)
	// token.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	token.UpdateDefaultUpdatedAt = tokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tokenDescDeletedAt is the schema descriptor for deleted_at field.
	tokenDescDeletedAt := tokenMixinFields0[3].Descriptor()
	// token.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	token.DefaultDeletedAt = tokenDescDeletedAt.Default.(int64)
	// tokenDescUserID is the schema descriptor for user_id field.
	tokenDescUserID := tokenFields[0].Descriptor()
	// token.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	token.UserIDValidator = func() func(string) error {
		validators := tokenDescUserID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user string) error {
			for _, fn := range fns {
				if err := fn(user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescToken is the schema descriptor for token field.
	tokenDescToken := tokenFields[1].Descriptor()
	// token.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	token.TokenValidator = func() func(string) error {
		validators := tokenDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescIsRevoked is the schema descriptor for is_revoked field.
	tokenDescIsRevoked := tokenFields[4].Descriptor()
	// token.DefaultIsRevoked holds the default value on creation for the is_revoked field.
	token.DefaultIsRevoked = tokenDescIsRevoked.Default.(bool)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenMixinFields0[0].Descriptor()
	// token.IDValidator is a validator for the "id" field. It is called by the builders before save.
	token.IDValidator = func() func(string) error {
		validators := tokenDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	userMixinInters0 := userMixin[0].Interceptors()
	user.Interceptors[0] = userMixinInters0[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescDeletedAt is the schema descriptor for deleted_at field.
	userDescDeletedAt := userMixinFields0[3].Descriptor()
	// user.DefaultDeletedAt holds the default value on creation for the deleted_at field.
	user.DefaultDeletedAt = userDescDeletedAt.Default.(int64)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func(string) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_hash string) error {
			for _, fn := range fns {
				if err := fn(password_hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescRealName is the schema descriptor for real_name field.
	userDescRealName := userFields[3].Descriptor()
	// user.RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	user.RealNameValidator = userDescRealName.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[4].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescDepartment is the schema descriptor for department field.
	userDescDepartment := userFields[5].Descriptor()
	// user.DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	user.DepartmentValidator = userDescDepartment.Validators[0].(func(string) error)
	// userDescPosition is the schema descriptor for position field.
	userDescPosition := userFields[6].Descriptor()
	// user.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	user.PositionValidator = userDescPosition.Validators[0].(func(string) error)
	// userDescRoles is the schema descriptor for roles field.
	userDescRoles := userFields[7].Descriptor()
	// user.DefaultRoles holds the default value on creation for the roles field.
	user.DefaultRoles = userDescRoles.Default.(string)
	// user.RolesValidator is a validator for the "roles" field. It is called by the builders before save.
	user.RolesValidator = userDescRoles.Validators[0].(func(string) error)
	// userDescForceChangePassword is the schema descriptor for force_change_password field.
	userDescForceChangePassword := userFields[9].Descriptor()
	// user.DefaultForceChangePassword holds the default value on creation for the force_change_password field.
	user.DefaultForceChangePassword = userDescForceChangePassword.Default.(bool)
	// userDescAllowMultiLogin is the schema descriptor for allow_multi_login field.
	userDescAllowMultiLogin := userFields[10].Descriptor()
	// user.DefaultAllowMultiLogin holds the default value on creation for the allow_multi_login field.
	user.DefaultAllowMultiLogin = userDescAllowMultiLogin.Default.(bool)
	// userDescLastLoginIP is the schema descriptor for last_login_ip field.
	userDescLastLoginIP := userFields[12].Descriptor()
	// user.LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	user.LastLoginIPValidator = userDescLastLoginIP.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}

const (
	Version = "v0.14.4"                                         // Version of ent codegen.
	Sum     = "h1:/DhDraSLXIkBhyiVoJeSshr4ZYi7femzhj6/TckzZuI=" // Sum of ent codegen.
)
