// Code generated by ent, DO NOT EDIT.

package role

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDataScope holds the string denoting the data_scope field in the database.
	FieldDataScope = "data_scope"
	// FieldDeptIds holds the string denoting the dept_ids field in the database.
	FieldDeptIds = "dept_ids"
	// FieldIsBuiltin holds the string denoting the is_builtin field in the database.
	FieldIsBuiltin = "is_builtin"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeRoleMenus holds the string denoting the role_menus edge name in mutations.
	EdgeRoleMenus = "role_menus"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// Table holds the table name of the role in the database.
	Table = "roles"
	// RoleMenusTable is the table that holds the role_menus relation/edge.
	RoleMenusTable = "role_menus"
	// RoleMenusInverseTable is the table name for the RoleMenu entity.
	// It exists in this package in order to avoid circular dependency with the "rolemenu" package.
	RoleMenusInverseTable = "role_menus"
	// RoleMenusColumn is the table column denoting the role_menus relation/edge.
	RoleMenusColumn = "role_id"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "user_roles"
	// UserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRolesInverseTable = "user_roles"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "role_id"
)

// Columns holds all SQL columns for role fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldCode,
	FieldDescription,
	FieldStatus,
	FieldDataScope,
	FieldDeptIds,
	FieldIsBuiltin,
	FieldSortOrder,
	FieldRemark,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/liukeshao/echo-template/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt int64
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultIsBuiltin holds the default value on creation for the "is_builtin" field.
	DefaultIsBuiltin bool
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	RemarkValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusEnabled is the default value of the Status enum.
const DefaultStatus = StatusEnabled

// Status values.
const (
	StatusEnabled  Status = "enabled"
	StatusDisabled Status = "disabled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusEnabled, StatusDisabled:
		return nil
	default:
		return fmt.Errorf("role: invalid enum value for status field: %q", s)
	}
}

// DataScope defines the type for the "data_scope" enum field.
type DataScope string

// DataScopeAll is the default value of the DataScope enum.
const DefaultDataScope = DataScopeAll

// DataScope values.
const (
	DataScopeAll     DataScope = "all"
	DataScopeDeptSub DataScope = "dept_sub"
	DataScopeDept    DataScope = "dept"
	DataScopeSelf    DataScope = "self"
	DataScopeCustom  DataScope = "custom"
)

func (ds DataScope) String() string {
	return string(ds)
}

// DataScopeValidator is a validator for the "data_scope" field enum values. It is called by the builders before save.
func DataScopeValidator(ds DataScope) error {
	switch ds {
	case DataScopeAll, DataScopeDeptSub, DataScopeDept, DataScopeSelf, DataScopeCustom:
		return nil
	default:
		return fmt.Errorf("role: invalid enum value for data_scope field: %q", ds)
	}
}

// OrderOption defines the ordering options for the Role queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDataScope orders the results by the data_scope field.
func ByDataScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataScope, opts...).ToFunc()
}

// ByIsBuiltin orders the results by the is_builtin field.
func ByIsBuiltin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBuiltin, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRoleMenusCount orders the results by role_menus count.
func ByRoleMenusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleMenusStep(), opts...)
	}
}

// ByRoleMenus orders the results by role_menus terms.
func ByRoleMenus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleMenusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoleMenusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleMenusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoleMenusTable, RoleMenusColumn),
	)
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
	)
}
