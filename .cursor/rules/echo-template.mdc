---
description: 项目开发规范
globs: 
alwaysApply: false
---
# Echo Template 项目开发规范

## 技术栈
- **框架**: Echo v4 + Ent ORM + SQLite + Viper + Zog 验证
- **错误处理**: oops (结构化错误) + 自定义错误响应体系
- **文档**: OpenAPI 3.1.0 + Redocly

## 核心规范

### 1. 命名约定
- **输入**: `XxxInput` (RegisterInput, CreateUserInput)
- **输出**: `XxxOutput` (UserOutput, AuthOutput)  
- **列表**: `ListXxxInput/Output` (ListUsersInput, ListUsersOutput)

### 2. 类型定义
- **位置**: `pkg/types/` 目录，按模块分文件
- **验证**: 所有 Input 类型必须实现 `Validate() []string` 方法

```go
type CreateUserInput struct {
    Username string `json:"username"`
    Email    string `json:"email"`
    Password string `json:"password"`
}

func (i *CreateUserInput) Validate() []string {
    // 返回验证错误列表
}
```

### 3. Handler 模式
```go
// 注册Handler
func init() {
    Register(new(MeHandler))
}

// 实现Handler接口
func (h *MeHandler) Init(c *services.Container) error {
    h.me = c.Me
    return nil
}

func (h *MeHandler) Routes(g *echo.Group) {
    api := g.Group("/api/v1/users")
    api.POST("", h.CreateUser)
}

// Handler实现
func (h *MeHandler) Create(c echo.Context) error {
    var in types.CreateUserInput
    if err := c.Bind(&in); err != nil {
        return errors.ErrBadRequest.Wrap(err)
    }
    
    // 验证输入 - 返回结构化错误响应
    if err := in.Validate(); err != nil {
        return err
    }
    
    out, err := h.me.Create(c.Request().Context(), &in)
    if err != nil {
        return err  // 业务错误通过 oops 构建器返回
    }
    
    return Success(c, out)
}
```

### 4. 响应格式
```go
type Response struct {
    Code      int            `json:"code"`                 // 0=成功, 非0=失败
    Message   string         `json:"message"`              // 响应消息
    Data      any            `json:"data"`                 // 响应数据
    Errors    []*ErrorDetail `json:"errors,omitempty"`     // 错误详情列表
    Timestamp int64          `json:"timestamp"`            // 时间戳
    RequestID string         `json:"request_id,omitempty"` // 请求ID
}

// 使用方式 - 统一使用 HTTP 200 状态码
return Success(c, data)  // 成功响应
```

### 5. 错误处理机制

#### 错误码体系
- **成功**: `0`
- **客户端错误**: `1xxxx` (BadRequest=10001, Unauthorized=10002, 等)
- **服务器错误**: `2xxxx` (InternalServerError=20001, 等)
- **业务错误**: `3xxxx` (DatabaseError=30001, ValidationError=30004, 等)

#### 错误详情结构
```go
type ErrorDetail struct {
    Message  string `json:"message,omitempty"`  // 错误消息
    Location string `json:"location,omitempty"` // 错误位置，如 "body.username"
    Value    any    `json:"value,omitempty"`    // 错误值
}
```

#### 错误构建器 (基于 oops)
```go
// 预定义的错误构建器
ErrDatabase      // 数据库错误
ErrBadRequest    // 请求参数错误
ErrUnauthorized  // 未授权
ErrValidation    // 数据验证错误
ErrBusinessLogic // 业务逻辑错误

// 使用方式
return errors.ErrValidation.
    With("username", "用户名格式错误").
    Wrapf(err, "验证用户输入失败")
```

#### 验证错误处理
```go
// Input 类型必须实现 Validator 接口
type Validator interface {
    Validate() *errors.Response  // 返回验证错误响应
    Shape() z.Shape             // Zog 验证规则
}

// Handler 中的验证模式
func (h *Handler) Create(c echo.Context) error {
    var in types.CreateInput
    if err := c.Bind(&in); err != nil {
        return errors.ErrBadRequest.Wrap(err)
    }
    
    // 验证输入 - 直接返回错误响应
    if err := in.Validate(); err != nil {
        return err
    }
    
    // 业务逻辑...
}
```

## API 开发流程

### API-First 模式
1. **定义规范**: 在 [api-specs/openapi/openapi.yaml](mdc:api-specs/openapi/openapi.yaml) 中定义API，基于redocly多目录最佳实践
2. **校验规范**: `make docs-lint`
3. **实现代码**: 按规范实现Handler和类型

### 常用命令
```bash
make docs-lint      # 校验 OpenAPI 规范
make run            # 启动服务
make ent-gen        # 生成Ent代码
make ent-new name=Entity  # 创建新实体
```

## 项目结构
```
echo-template/
├── cmd/web/main.go     # 主程序
├── api-specs/          # API规范
│   ├── openapi/        # OpenAPI规范源文件
│   └── package.json    # Redocly依赖管理
├── pkg/
│   ├── handlers/       # HTTP处理器
│   │   ├── error_handler.go  # 统一错误处理器
│   │   └── handlers.go       # 响应辅助函数
│   ├── services/       # 业务服务
│   ├── types/          # 类型定义和验证
│   │   └── validator.go      # 验证接口和工具
│   ├── middleware/     # 中间件
│   ├── errors/         # 错误处理体系
│   │   ├── response.go       # 统一响应结构
│   │   ├── error_detail.go   # 错误详情结构
│   │   └── helper.go         # 错误码和构建器
│   └── utils/          # 工具函数
└── ent/                # 数据模型
```

## 文档规范 (Redocly)

### 多文件组织
- **根文件**: `api-specs/openapi/openapi.yaml` - 主要的API定义
- **路径分离**: `api-specs/openapi/paths/` - 每个API端点单独文件
- **组件分离**: `api-specs/openapi/components/schemas/` - 数据模型定义
- **配置文件**: `api-specs/redocly.yaml` - Redocly配置和规则

### 文档生成
- **本地预览**: `cd api-specs && npm start`
- **规范验证**: `make docs-lint`

### 规范约定
- 认证操作（注册/登录/刷新）使用 `security: []`
- 需要认证的操作使用 `BearerAuth` 安全方案
- 统一使用 200 状态码，通过 `code` 字段区分业务状态
- 所有响应都继承自统一的 `Response` schema

## 开发原则
- **API优先**: 先定义OpenAPI规范，后实现代码
- **类型安全**: Input验证 + 统一响应格式
- **依赖注入**: 通过容器管理服务依赖
- **HTTP 200**: 统一使用200状态码，通过code字段区分业务状态
- **错误处理**: 基于 oops 的结构化错误处理，支持错误链追踪
- **验证优先**: 所有Input类型必须实现Validate()方法
- **规范同步**: 确保OpenAPI规范与代码实现保持一致
- **文档驱动**: 基于 Redocly 最佳实践维护API文档

## 日志规范
```go
import "log/slog"
slog.InfoContext(ctx, "处理请求", "user_id", userID)
slog.ErrorContext(ctx, "业务错误", "error", err)
```

---
**记住**: 规范先行，文档驱动，统一响应，保持同步！

**文档工作流**: 在 `api-specs/` 目录维护OpenAPI规范，使用 `make docs-lint` 命令验证文档。
